
void RecursivePrint(NODPTR ptr) {
	if (ptr->Lptr == NULL && ptr->Rptr == NULL) {
		printf(" %s ",ptr->val);
	}
	else {
		RecursivePrint(ptr->Lptr);
		printf(" %s ",ptr->val);
		RecursivePrint(ptr->Rptr);
	}
}

void PrintMax() {
	printf("\nMaximum height of the tree is %d\n", height);
	height=0;
}

void PrintTree(NODPTR ptr, int pos) {
	if (ptr->Lptr == NULL && ptr->Rptr == NULL) {
		if(pos > height) height = pos;
		printf("%*s\n",pos*5,ptr->val);
	}
	else {
		printf("%*s\n",pos*5,ptr->val);
		pos++;
		PrintTree(ptr->Lptr,pos);
		PrintTree(ptr->Rptr,pos);
	}
}

int EvaluateTree(NODPTR ptr) {
	if (ptr->Lptr == NULL && ptr->Rptr == NULL) {
		return atoi(ptr->val);
	}
	else {
		if(strcmp((ptr->val),"+")==0) {
			return ((EvaluateTree(ptr->Lptr))+(EvaluateTree(ptr->Rptr)));
		}
		if(strcmp((ptr->val),"-")==0) {
			return ((EvaluateTree(ptr->Lptr))-(EvaluateTree(ptr->Rptr)));
		}
		if(strcmp((ptr->val),"*")==0) {
			return ((EvaluateTree(ptr->Lptr))*(EvaluateTree(ptr->Rptr)));
		}
		if(strcmp((ptr->val),"/")==0) {
			return ((EvaluateTree(ptr->Lptr))/(EvaluateTree(ptr->Rptr)));
		}
	}
}
